plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'org.unbroken-dome.test-sets' version '4.0.0'
    id 'application'
    id 'java'
    id 'jacoco'
    id 'de.jansauer.printcoverage' version '2.0.0'
    id 'com.adarshr.test-logger' version '3.2.0'
}

group 'com.finx'
version '1.0'

repositories {
    mavenCentral()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

mainClassName = 'com.finx.dropwizard.DropwizardApplication'

compileJava {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

dependencies {
    implementation platform('io.dropwizard:dropwizard-dependencies:2.1.4')
    implementation platform('ru.vyarus.guicey:guicey-bom:5.6.1-1')
    implementation platform('org.testcontainers:testcontainers-bom:1.17.5')

    implementation 'com.finx:common'

    implementation 'io.dropwizard:dropwizard-core'
    implementation 'io.dropwizard:dropwizard-client'
    implementation 'io.dropwizard:dropwizard-migrations'
    implementation 'ru.vyarus:dropwizard-guicey'
    implementation 'ru.vyarus.guicey:guicey-jdbi3'

    implementation 'org.postgresql:postgresql:42.5.0'

    testImplementation('io.dropwizard:dropwizard-testing') {
        exclude group: 'junit', module: 'junit'
    }
    testImplementation('org.junit.jupiter:junit-jupiter')
    testImplementation('org.junit.jupiter:junit-jupiter-params')
    testImplementation('org.mockito:mockito-core')
    testImplementation('org.mockito:mockito-junit-jupiter')
    testImplementation('org.assertj:assertj-core')
    testImplementation('org.testcontainers:postgresql')
    testImplementation('org.jbehave:jbehave-core:5.0')

}

shadowJar {
    mergeServiceFiles()
    exclude 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.SF'
    manifest {
        attributes 'Main-Class': mainClassName
    }
    archiveName 'dropwizard-example.jar'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

testSets {
    integrationTest {
        useJUnitPlatform()
        mustRunAfter test
    }
}

sourceSets {
    componentTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/componentTest/java')
        }
        resources.srcDir file('src/componentTest/resources')
    }
}

configurations {
    componentTestImplementation.extendsFrom integrationTestImplementation
    componentTestRuntime.extendsFrom integrationTestRuntime
}

task componentTest(type: Test) {
    useJUnitPlatform()
    description = 'Runs component tests'
    testClassesDirs = sourceSets.componentTest.output.classesDirs
    classpath = sourceSets.componentTest.runtimeClasspath
    outputs.upToDateWhen { false }
    mustRunAfter integrationTest
}

processComponentTestResources {
    duplicatesStrategy = 'include'
}


tasks.named('check') {
    dependsOn(integrationTest, componentTest, printCoverage)
}


testlogger {
    theme 'mocha'
}

jacocoTestReport {
    reports.xml.enabled true
    reports.html.enabled true
}
